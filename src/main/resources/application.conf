jelly {
  benchmark {
    output-dir = "./"

    repeats = 15
    network-repeats = 8

    latency-cases = [
      # unconstrained case
      {
        messages = 10000
        interval = 0 ms
      },
      # constrained cases
      {
        messages = 1000
        # This won't be really 10 ms in practice. Pekko's actor system has a tick rate of about ~30 ms,
        # so the actual interval will be 30 ms. We could change the tick rate, but that would have all sorts of
        # other implications for the system, which would be "bad" and "complicated".
        interval = 10 ms
        # Every tick, we send 1 message.
        burst = 1
      },
      {
        messages = 4000
        interval = 10 ms
        burst = 4
      },
      {
        # politiquices (smallest RiverBench dataset) has 17773 elements, so we are fine with 16000 messages
        messages = 16000
        interval = 10 ms
        burst = 16
      }
    ]
  }
  
  enabled-formats {
    jena = "turtle-pretty,json-ld,rdf-xml"
    jena-streaming = "turtle-blocks,nt,protobuf,thrift"
    jelly = "big,big-noprefix,small,small-noprefix"
    rdf4j = "nt,binary"
  }
}

pekko.grpc.client {
  jelly-rdf-client {
    host = 127.0.0.1
    port = 8420
    use-tls = false
    backend = "netty"
  }
}

# Copied settings from reference.conf of jelly-grpc...
# ...just to make sure they are applied in the uber-JAR.
pekko.http.server.preview.enable-http2 = on
pekko.http.server.http2.ping-interval = 10s

pekko.kafka {
  consumer {
    kafka-clients {
      bootstrap.servers = "127.0.0.1:9092"
    }
  }

  producer {
    kafka-clients {
      bootstrap.servers = "127.0.0.1:9092"
    }
  }
}
